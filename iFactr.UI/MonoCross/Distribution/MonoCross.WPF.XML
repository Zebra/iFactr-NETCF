<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoCross.WPF</name>
    </assembly>
    <members>
        <member name="T:MonoCross.WPF.MXPageView`1">
            <summary>
            A <see cref="T:System.Windows.Controls.Page"/> for rendering MonoCross views.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MonoCross.WPF.MXPageView`1.Model">
            <summary>
            Gets or sets the model for this view.
            </summary>
        </member>
        <member name="P:MonoCross.WPF.MXPageView`1.ModelType">
            <summary>
            The type of the model displayed by this view
            </summary>
        </member>
        <member name="M:MonoCross.WPF.MXPageView`1.Render">
            <summary>
            Displays the view according to the state of the model.
            </summary>
        </member>
        <member name="M:MonoCross.WPF.MXPageView`1.SetModel(System.Object)">
            <summary>
            Sets the model for the view.
            </summary>
            <param name="model">The model to associate with the view.</param>
            <exception cref="T:System.InvalidCastException">Thrown if a model of the wrong type is set.</exception>
        </member>
        <member name="T:MonoCross.WPF.MXWindowsContainer">
            <summary>
            Represents a WPF instance of a MonoCross container.
            </summary>
        </member>
        <member name="F:MonoCross.WPF.MXWindowsContainer.ViewModels">
            <summary>
            Cache for Models that have been loaded into views.
            </summary>
        </member>
        <member name="P:MonoCross.WPF.MXWindowsContainer.NavigationHandler">
            <summary>
            Provides an <see cref="T:System.Action`1"/> to render the view from a loaded controller.
            </summary>
        </member>
        <member name="P:MonoCross.WPF.MXWindowsContainer.NavigationFrame">
            <summary>
            Gets or sets the frame to display rendered <see cref="T:MonoCross.WPF.MXPageView`1"/>s.
            </summary>
        </member>
        <member name="M:MonoCross.WPF.MXWindowsContainer.#ctor(MonoCross.Navigation.MXApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoCross.WPF.MXWindowsContainer"/> class.
            </summary>
            <param name="theApp">The application to contain.</param>
        </member>
        <member name="M:MonoCross.WPF.MXWindowsContainer.Initialize(MonoCross.Navigation.MXApplication,System.Windows.Controls.Frame)">
            <summary>
            Initializes the specified the application into a container.
            </summary>
            <param name="theApp">The application.</param>
            <param name="navFrame">The frame to use for page navigation.</param>
        </member>
        <member name="M:MonoCross.WPF.MXWindowsContainer.OnControllerLoadBegin(MonoCross.Navigation.IMXController,MonoCross.Navigation.IMXView)">
            <summary>
            Called when a controller is about to be loaded.
            </summary>
            <param name="controller">The controller to be loaded.</param>
            <param name="fromView">The view that initiated the navigation that resulted in the controller being loaded.</param>
        </member>
        <member name="M:MonoCross.WPF.MXWindowsContainer.OnControllerLoadFailed(MonoCross.Navigation.IMXController,System.Exception)">
            <summary>
            Raises the controller load failed event.
            </summary>
            <param name="controller">The controller that failed to load.</param>
            <param name="ex">The exception that caused the load to fail.</param>
        </member>
        <member name="M:MonoCross.WPF.MXWindowsContainer.OnControllerLoadComplete(MonoCross.Navigation.IMXView,MonoCross.Navigation.IMXController,System.String,System.String)">
            <summary>
            Raises the load complete event after the Controller has completed loading its Model. The View may be populated,
            and the derived class should check if it exists and do something with it if needed for the platform: either free it,
            pop off the views in a stack above it or whatever makes sense to the platform.
            </summary>
            <param name="fromView">The view that raised the navigation.</param>
            <param name="controller">The newly loaded controller.</param>
            <param name="viewPerspective">The view perspective returned by the controller load.</param>
            <exception cref="T:System.TypeLoadException">View not found for  + viewPerspective.ToString()</exception>
        </member>
        <member name="M:MonoCross.WPF.MXWindowsContainer.Redirect(System.String)">
            <summary>
            Cancels loading of the current controller and navigates to the specified url.
            </summary>
            <param name="url">The url of the controller to navigate to.</param>
        </member>
        <member name="T:MonoCross.WPF.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MonoCross.WPF.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MonoCross.WPF.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
